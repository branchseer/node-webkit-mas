diff --git a/chrome/common/chrome_constants.cc b/chrome/common/chrome_constants.cc
index 92d88e7..f2bb8c8 100644
--- a/chrome/common/chrome_constants.cc
+++ b/chrome/common/chrome_constants.cc
@@ -192,7 +192,7 @@ const base::FilePath::CharType kSingletonCookieFilename[] =
     FPL("SingletonCookie");
 const base::FilePath::CharType kSingletonLockFilename[] = FPL("SingletonLock");
 const base::FilePath::CharType kSingletonSocketFilename[] =
-    FPL("SingletonSocket");
+    FPL("S");//MAS:SingletonSocket
 const base::FilePath::CharType kSyncCredentialsFilename[] =
     FPL("Sync Credentials");
 const base::FilePath::CharType kThemePackFilename[] = FPL("Cached Theme.pak");
diff --git a/content/browser/accessibility/browser_accessibility_cocoa.mm b/content/browser/accessibility/browser_accessibility_cocoa.mm
index f1565eb..f332ccc 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.mm
+++ b/content/browser/accessibility/browser_accessibility_cocoa.mm
@@ -20,7 +20,7 @@
 // See http://openradar.appspot.com/9896491. This SPI has been tested on 10.5,
 // 10.6, and 10.7. It allows accessibility clients to observe events posted on
 // this object.
-extern "C" void NSAccessibilityUnregisterUniqueIdForUIElement(id element);
+//extern "C" void NSAccessibilityUnregisterUniqueIdForUIElement(id element);MAS
 
 using ui::AXNodeData;
 using content::BrowserAccessibility;
@@ -317,7 +317,7 @@ NSDictionary* attributeToMethodNameMap = nil;
 
 - (void)detach {
   if (browserAccessibility_) {
-    NSAccessibilityUnregisterUniqueIdForUIElement(self);
+    //NSAccessibilityUnregisterUniqueIdForUIElement(self);MAS
     browserAccessibility_ = NULL;
   }
 }
diff --git a/content/browser/device_monitor_mac.mm b/content/browser/device_monitor_mac.mm
index 10dd620..657ab57 100644
--- a/content/browser/device_monitor_mac.mm
+++ b/content/browser/device_monitor_mac.mm
@@ -4,7 +4,8 @@
 
 #include "content/browser/device_monitor_mac.h"
 
-#import <QTKit/QTKit.h>
+//#import <QTKit/QTKit.h>MAS
+#import <Foundation/Foundation.h>//MAS
 
 #include <set>
 
@@ -142,6 +143,7 @@ class QTKitMonitorImpl : public DeviceMonitorMacImpl {
 
 QTKitMonitorImpl::QTKitMonitorImpl(content::DeviceMonitorMac* monitor)
     : DeviceMonitorMacImpl(monitor) {
+    /*MAS
   NSNotificationCenter* nc = [NSNotificationCenter defaultCenter];
   device_arrival_ =
       [nc addObserverForName:QTCaptureDeviceWasConnectedNotification
@@ -161,25 +163,31 @@ QTKitMonitorImpl::QTKitMonitorImpl(content::DeviceMonitorMac* monitor)
                        queue:nil
                   usingBlock:^(NSNotification* notification) {
                       OnAttributeChanged(notification);}];
+                      */
 }
 
 QTKitMonitorImpl::~QTKitMonitorImpl() {
+/*MAS
   NSNotificationCenter* nc = [NSNotificationCenter defaultCenter];
   [nc removeObserver:device_arrival_];
   [nc removeObserver:device_removal_];
   [nc removeObserver:device_change_];
+*/
 }
 
 void QTKitMonitorImpl::OnAttributeChanged(
     NSNotification* notification) {
+    /*MAS
   if ([[[notification userInfo]
          objectForKey:QTCaptureDeviceChangedAttributeKey]
       isEqualToString:QTCaptureDeviceSuspendedAttribute]) {
     OnDeviceChanged();
   }
+  */
 }
 
 void QTKitMonitorImpl::OnDeviceChanged() {
+/*MAS
   std::vector<DeviceInfo> snapshot_devices;
 
   NSArray* devices = [QTCaptureDevice inputDevices];
@@ -204,6 +212,7 @@ void QTKitMonitorImpl::OnDeviceChanged() {
         DeviceInfo([[device uniqueID] UTF8String], device_type));
   }
   ConsolidateDevicesListAndNotify(snapshot_devices);
+*/
 }
 
 // Forward declaration for use by CrAVFoundationDeviceObserver.
@@ -373,7 +382,7 @@ void DeviceMonitorMac::StartMonitoring() {
 void DeviceMonitorMac::NotifyDeviceChanged(
     base::SystemMonitor::DeviceType type) {
   // TODO(xians): Remove the global variable for SystemMonitor.
-  base::SystemMonitor::Get()->ProcessDevicesChanged(type);
+  //base::SystemMonitor::Get()->ProcessDevicesChanged(type);MAS
 }
 
 }  // namespace content
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index f807fa2..f023b9d 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -1412,7 +1412,7 @@ void RenderWidgetHostViewMac::CompositorSwapBuffers(
       {
         gfx::ScopedCGLSetCurrentContext scoped_set_current_context(
             compositing_iosurface_context_->cgl_context());
-        glFlush();
+        //glFlush();MAS???
       }
       compositing_iosurface_->CopyToVideoFrame(
           gfx::Rect(size), frame,
@@ -3796,9 +3796,9 @@ static const NSTrackingRectTag kTrackingRectTag = 0xBADFACE;
 // Since this implementation doesn't have to wait any IPC calls, this doesn't
 // make any key-typing jank. --hbono 7/23/09
 //
-extern "C" {
-extern NSString *NSTextInputReplacementRangeAttributeName;
-}
+//extern "C" {
+//extern NSString *NSTextInputReplacementRangeAttributeName;MAS
+//}
 
 - (NSArray *)validAttributesForMarkedText {
   // This code is just copied from WebKit except renaming variables.
@@ -3807,7 +3807,7 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
         NSUnderlineStyleAttributeName,
         NSUnderlineColorAttributeName,
         NSMarkedClauseSegmentAttributeName,
-        NSTextInputReplacementRangeAttributeName,
+        //NSTextInputReplacementRangeAttributeName,MAS
         nil]);
   }
   return validAttributesForMarkedText_.get();
diff --git a/media/media.gyp b/media/media.gyp
index fa06e15..a30c4b7 100644
--- a/media/media.gyp
+++ b/media/media.gyp
@@ -788,7 +788,6 @@
               '$(SDKROOT)/System/Library/Frameworks/CoreMIDI.framework',
               '$(SDKROOT)/System/Library/Frameworks/CoreVideo.framework',
               '$(SDKROOT)/System/Library/Frameworks/OpenGL.framework',
-              '$(SDKROOT)/System/Library/Frameworks/QTKit.framework',
             ],
           },
         }],
diff --git a/media/video/capture/mac/video_capture_device_mac.h b/media/video/capture/mac/video_capture_device_mac.h
index 3b12d83..21b3f34 100644
--- a/media/video/capture/mac/video_capture_device_mac.h
+++ b/media/video/capture/mac/video_capture_device_mac.h
@@ -17,7 +17,7 @@
 #include "media/video/capture/video_capture_device.h"
 #include "media/video/capture/video_capture_types.h"
 
-@protocol PlatformVideoCapturingMac;
+//@protocol PlatformVideoCapturingMac;MAS
 
 namespace base {
 class SingleThreadTaskRunner;
@@ -76,7 +76,7 @@ class VideoCaptureDeviceMac : public VideoCaptureDevice {
   const scoped_refptr<base::SingleThreadTaskRunner> task_runner_;
   InternalState state_;
 
-  id<PlatformVideoCapturingMac> capture_device_;
+  //id<PlatformVideoCapturingMac> capture_device_;MAS
 
   // Used with Bind and PostTask to ensure that methods aren't called after the
   // VideoCaptureDeviceMac is destroyed.
diff --git a/media/video/capture/mac/video_capture_device_mac.mm b/media/video/capture/mac/video_capture_device_mac.mm
index 7b88037..ccc7408 100644
--- a/media/video/capture/mac/video_capture_device_mac.mm
+++ b/media/video/capture/mac/video_capture_device_mac.mm
@@ -12,7 +12,7 @@
 #import "media/video/capture/mac/avfoundation_glue.h"
 #import "media/video/capture/mac/platform_video_capturing_mac.h"
 #import "media/video/capture/mac/video_capture_device_avfoundation_mac.h"
-#import "media/video/capture/mac/video_capture_device_qtkit_mac.h"
+//#import "media/video/capture/mac/video_capture_device_qtkit_mac.h"MAS
 
 namespace media {
 
@@ -64,6 +64,7 @@ void GetBestMatchSupportedResolution(int* width, int* height) {
 }
 
 void VideoCaptureDevice::GetDeviceNames(Names* device_names) {
+/*MAS
   // Loop through all available devices and add to |device_names|.
   device_names->clear();
 
@@ -80,6 +81,7 @@ void VideoCaptureDevice::GetDeviceNames(Names* device_names) {
               [key UTF8String]);
     device_names->push_back(name);
   }
+*/
 }
 
 // static
@@ -95,6 +97,7 @@ void VideoCaptureDevice::GetDeviceSupportedFormats(const Name& device,
 }
 
 const std::string VideoCaptureDevice::Name::GetModel() const {
+/*
   // Both PID and VID are 4 characters.
   if (unique_id_.size() < 2 * kVidPidSize) {
     return "";
@@ -107,9 +110,12 @@ const std::string VideoCaptureDevice::Name::GetModel() const {
   std::string id_product = unique_id_.substr(pid_location, kVidPidSize);
 
   return id_vendor + ":" + id_product;
+  MAS*/
+  return "";//MAS
 }
 
 VideoCaptureDevice* VideoCaptureDevice::Create(const Name& device_name) {
+/*
   VideoCaptureDeviceMac* capture_device =
       new VideoCaptureDeviceMac(device_name);
   if (!capture_device->Init()) {
@@ -118,6 +124,8 @@ VideoCaptureDevice* VideoCaptureDevice::Create(const Name& device_name) {
     capture_device = NULL;
   }
   return capture_device;
+MAS*/
+  return NULL;//MAS
 }
 
 VideoCaptureDeviceMac::VideoCaptureDeviceMac(const Name& device_name)
@@ -125,19 +133,22 @@ VideoCaptureDeviceMac::VideoCaptureDeviceMac(const Name& device_name)
       tried_to_square_pixels_(false),
       task_runner_(base::MessageLoopProxy::current()),
       state_(kNotInitialized),
-      capture_device_(nil),
+      //capture_device_(nil),MAS
       weak_factory_(this) {
   final_resolution_selected_ = AVFoundationGlue::IsAVFoundationSupported();
 }
 
 VideoCaptureDeviceMac::~VideoCaptureDeviceMac() {
+/*MAS
   DCHECK(task_runner_->BelongsToCurrentThread());
   [capture_device_ release];
+*/
 }
 
 void VideoCaptureDeviceMac::AllocateAndStart(
     const VideoCaptureParams& params,
     scoped_ptr<VideoCaptureDevice::Client> client) {
+    /*MAS
   DCHECK(task_runner_->BelongsToCurrentThread());
   if (state_ != kIdle) {
     return;
@@ -188,9 +199,11 @@ void VideoCaptureDeviceMac::AllocateAndStart(
   }
 
   state_ = kCapturing;
+  */
 }
 
 void VideoCaptureDeviceMac::StopAndDeAllocate() {
+/*MAS
   DCHECK(task_runner_->BelongsToCurrentThread());
   DCHECK(state_ == kCapturing || state_ == kError) << state_;
   [capture_device_ stopCapture];
@@ -200,9 +213,11 @@ void VideoCaptureDeviceMac::StopAndDeAllocate() {
   client_.reset();
   state_ = kIdle;
   tried_to_square_pixels_ = false;
+  */
 }
 
 bool VideoCaptureDeviceMac::Init() {
+/*MAS
   DCHECK(task_runner_->BelongsToCurrentThread());
   DCHECK_EQ(state_, kNotInitialized);
 
@@ -232,6 +247,8 @@ bool VideoCaptureDeviceMac::Init() {
 
   state_ = kIdle;
   return true;
+  */
+  return false;//MAS
 }
 
 void VideoCaptureDeviceMac::ReceiveFrame(
@@ -240,6 +257,7 @@ void VideoCaptureDeviceMac::ReceiveFrame(
     const VideoCaptureFormat& frame_format,
     int aspect_numerator,
     int aspect_denominator) {
+    /*MAS
   // This method is safe to call from a device capture thread, i.e. any thread
   // controlled by QTKit/AVFoundation.
   if (!final_resolution_selected_) {
@@ -308,23 +326,29 @@ void VideoCaptureDeviceMac::ReceiveFrame(
                                   capture_format_,
                                   0,
                                   base::TimeTicks::Now());
+                          */
 }
 
 void VideoCaptureDeviceMac::ReceiveError(const std::string& reason) {
+/*MAS
   task_runner_->PostTask(FROM_HERE,
                          base::Bind(&VideoCaptureDeviceMac::SetErrorState,
                                     weak_factory_.GetWeakPtr(),
                                     reason));
+                                  */
 }
 
 void VideoCaptureDeviceMac::SetErrorState(const std::string& reason) {
+/*MAS
   DCHECK(task_runner_->BelongsToCurrentThread());
   DLOG(ERROR) << reason;
   state_ = kError;
   client_->OnError(reason);
+*/
 }
 
 bool VideoCaptureDeviceMac::UpdateCaptureResolution() {
+/*MAS
  if (![capture_device_ setCaptureHeight:capture_format_.frame_size.height()
                                   width:capture_format_.frame_size.width()
                               frameRate:capture_format_.frame_rate]) {
@@ -332,6 +356,8 @@ bool VideoCaptureDeviceMac::UpdateCaptureResolution() {
    return false;
  }
  return true;
+*/
+  return false;//MAS
 }
 
 } // namespace media
diff --git a/media/video/capture/mac/video_capture_device_qtkit_mac.h b/media/video/capture/mac/video_capture_device_qtkit_mac.h
index 1eba8a1..a3493b9 100644
--- a/media/video/capture/mac/video_capture_device_qtkit_mac.h
+++ b/media/video/capture/mac/video_capture_device_qtkit_mac.h
@@ -5,6 +5,7 @@
 // VideoCaptureDeviceQTKit implements all QTKit related code for
 // communicating with a QTKit capture device.
 
+/*MAS
 #ifndef MEDIA_VIDEO_CAPTURE_MAC_VIDEO_CAPTURE_DEVICE_QTKIT_MAC_H_
 #define MEDIA_VIDEO_CAPTURE_MAC_VIDEO_CAPTURE_DEVICE_QTKIT_MAC_H_
 
@@ -66,3 +67,4 @@ class VideoCaptureDeviceMac;
 @end
 
 #endif  // MEDIA_VIDEO_CAPTURE_MAC_VIDEO_CAPTURE_DEVICE_QTKIT_MAC_H_
+*/
diff --git a/media/video/capture/mac/video_capture_device_qtkit_mac.mm b/media/video/capture/mac/video_capture_device_qtkit_mac.mm
index a4bf71d..ad15ee0 100644
--- a/media/video/capture/mac/video_capture_device_qtkit_mac.mm
+++ b/media/video/capture/mac/video_capture_device_qtkit_mac.mm
@@ -1,7 +1,7 @@
 // Copyright (c) 2012 The Chromium Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
-
+/*MAS
 #import "media/video/capture/mac/video_capture_device_qtkit_mac.h"
 
 #import <QTKit/QTKit.h>
@@ -313,3 +313,4 @@
 }
 
 @end
+*/
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index 0644d4d..96d14dc 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -97,10 +97,13 @@ class DnsConfigWatcher {
   typedef base::Callback<void(bool succeeded)> CallbackType;
 
   bool Watch(const CallbackType& callback) {
+    /*MAS
     callback_ = callback;
     return watcher_.Watch(base::FilePath(kFilePathConfig), false,
                           base::Bind(&DnsConfigWatcher::OnCallback,
                                      base::Unretained(this)));
+                                    */
+    return false;//MAS
   }
 
  private:
@@ -216,6 +219,7 @@ class DnsConfigServicePosix::Watcher {
                                 DNS_CONFIG_WATCH_FAILED_TO_START_CONFIG,
                                 DNS_CONFIG_WATCH_MAX);
     }
+    /*MAS
     if (!hosts_watcher_.Watch(base::FilePath(kFilePathHosts), false,
                               base::Bind(&Watcher::OnHostsChanged,
                                          base::Unretained(this)))) {
@@ -225,6 +229,7 @@ class DnsConfigServicePosix::Watcher {
                                 DNS_CONFIG_WATCH_FAILED_TO_START_HOSTS,
                                 DNS_CONFIG_WATCH_MAX);
     }
+    */
     return success;
   }
 
diff --git a/ui/shell_dialogs/select_file_dialog_mac.mm b/ui/shell_dialogs/select_file_dialog_mac.mm
index b02d46e..e09a941 100644
--- a/ui/shell_dialogs/select_file_dialog_mac.mm
+++ b/ui/shell_dialogs/select_file_dialog_mac.mm
@@ -416,7 +416,7 @@ bool SelectFileDialogImpl::HasMultipleFileTypeChoicesImpl() {
         index = 1;
       }
     } else {
-      CHECK([panel isKindOfClass:[NSOpenPanel class]]);
+      //CHECK([panel isKindOfClass:[NSOpenPanel class]]);MAS
       NSArray* urls = [static_cast<NSOpenPanel*>(panel) URLs];
       for (NSURL* url in urls)
         if ([url isFileURL])
